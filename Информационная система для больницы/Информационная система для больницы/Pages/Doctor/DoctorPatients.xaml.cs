using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using OxyPlot;
using OxyPlot.Axes;
using OxyPlot.Series;
using Информационная_система_для_больницы.Data;

namespace Информационная_система_для_больницы.Pages.Doctor
{
    /// <summary>
    /// Логика взаимодействия для DoctorPatients.xaml
    /// </summary>
    public partial class DoctorPatients : Page
    {
        Data.AppContext db;

        public static MainWindow main = (MainWindow)Application.Current.MainWindow;

        bool IndicatorAddMode = false;
        bool AppointmentAddMode = false;

        Registration selectedPatient = null;
        Indicator selectedIndicator = null;
        dynamic selectedAppointment = null;
        public DoctorPatients()
        {
            InitializeComponent();
            //db = new Data.AppContext();
            doctorPatientsPatientsList.ItemsSource = GetPatients();
        }

        public List<string> GetPatients()
        {
            db = new Data.AppContext();

            var allRegistrations = db.Registrations.ToList();
            var currentDoctor = from d in db.Employees
                                where d.fullName == main.currentUser.Content.ToString()
                                select d.id;
            var currentRegistrations = from r in allRegistrations
                                  let endDate = string.IsNullOrEmpty(r.end) ? (DateTime?)null : Convert.ToDateTime(r.end)
                                  where (endDate == null || endDate > DateTime.Today) && r.doctorId == currentDoctor.FirstOrDefault().ToString()
                                  select r.patientId;
            var currentPatients = from p in db.Patients
                                  where currentRegistrations.ToList().Contains(p.id)
                                  select p.fullName;

            return currentPatients.OrderBy(x => x).ToList();
        }

        private void doctorPatientsPatientsList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            var _selectedPatient = from p in db.Patients
                                   where p.fullName == doctorPatientsPatientsList.SelectedValue.ToString()
                                   select p.id;
            var _selectedRegistration = from r in db.Registrations
                                        where r.patientId == _selectedPatient.FirstOrDefault().ToString()
                                        select r;

            selectedPatient = _selectedRegistration.FirstOrDefault();

            doctorPatientsIndicatorsList.ItemsSource = GetIndicators();
            doctorPatientsAppointmentsDataGrid.ItemsSource = GetAppointments();
        }

        public List<string> GetIndicators()
        {
            db = new Data.AppContext();
            var collectingIndicators =  from ci in db.CollectingIndicators
                                        where ci.registrationId == selectedPatient.id
                                        select ci.indicatorId;
            var indicators = from i in db.Indicators
                             where collectingIndicators.ToList().Contains(i.id)
                             select i.name;
            return indicators.ToList();
        }

        public List<object> GetAppointments()
        {
            db = new Data.AppContext();

            var appointments = from a in db.Appointments
                               where a.registrationId == selectedPatient.id
                               select new
                               {
                                   Patient = a.registration.patient.fullName,
                                   Doctor = a.registration.doctor.fullName,
                                   DrugOrProcedure = a.drugProcedure.name,
                                   Note = a.note
                               };

            return appointments.AsEnumerable().Cast<dynamic>().ToList();
        }

        private void doctorPatientsAppointmentsDataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            doctorPatientsAppointmentsDataGrid.Columns[0].Header = "Пациент";
            doctorPatientsAppointmentsDataGrid.Columns[1].Header = "Лечащий врач";
            doctorPatientsAppointmentsDataGrid.Columns[2].Header = "Препарат или процедура";
            doctorPatientsAppointmentsDataGrid.Columns[3].Header = "Дополнительная информация";

            doctorPatientsAppointmentsDataGrid.Columns[0].Width = new DataGridLength(1, DataGridLengthUnitType.Auto); 
            doctorPatientsAppointmentsDataGrid.Columns[1].Width = new DataGridLength(1, DataGridLengthUnitType.Auto); 
            doctorPatientsAppointmentsDataGrid.Columns[2].Width = new DataGridLength(1, DataGridLengthUnitType.Auto); 
            doctorPatientsAppointmentsDataGrid.Columns[3].Width = new DataGridLength(1, DataGridLengthUnitType.Star); 
        }

        private void doctorPatientsIndicatorsList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if(doctorPatientsIndicatorsList.SelectedItem != null)
            {
                doctorPatientShowCondition.IsEnabled = true;
                doctorPatientDeleteIndicator.IsEnabled = true;
            }
            else
            {
                doctorPatientShowCondition.IsEnabled = true;
                doctorPatientDeleteIndicator.IsEnabled = true;
            }
        }

        private void doctorPatientShowCondition_Click(object sender, RoutedEventArgs e)
        {
            doctorPatientsChartLabel.Content = doctorPatientsIndicatorsList.SelectedValue.ToString();
            SetChart();
            OpenConditionsForm();
        }

        public void OpenConditionsForm()
        {
            doctorPatientsMainPart.IsEnabled = false;
            doctorPatientShowCondition.Visibility = Visibility.Visible;
        }

        public void SetChart()
        {
            PlotModel plotModel = new PlotModel();
            LinearAxis xAxis = new LinearAxis
            {
                Title = "Дата",
                Position = AxisPosition.Bottom,
                StringFormat = "yyyy-MM-dd HH:mm:ss"
                //Minimum = 0,
                //Maximum = 10
            };
            LinearAxis yAxis = new LinearAxis
            {
                Title = "Значение",
                Position = AxisPosition.Left,
                //Minimum = 0,
                //Maximum = 10
            };

            List<DataPoint> DateDataPoints = new List<DataPoint>();
            //doctorPatientsChart.
        }

        public void CloseConditionsForm()
        {
            doctorPatientShowCondition.Visibility = Visibility.Visible;
            doctorPatientsMainPart.IsEnabled = true;
        }
        private void doctorPatientAddIndicator_Click(object sender, RoutedEventArgs e)
        {

        }

        private void doctorPatientAlterIndicator_Click(object sender, RoutedEventArgs e)
        {

        }

        private void doctorPatientDeleteIndicator_Click(object sender, RoutedEventArgs e)
        {

        }

        private void doctorPatientShowShedule_Click(object sender, RoutedEventArgs e)
        {

        }

        private void doctorPatientAddAppointment_Click(object sender, RoutedEventArgs e)
        {

        }

        private void doctorPatientAlterAppointment_Click(object sender, RoutedEventArgs e)
        {

        }

        private void doctorPatientDeleteAppointment_Click(object sender, RoutedEventArgs e)
        {

        }

        private void registrarDrugsDrugFormCancel_Click(object sender, RoutedEventArgs e)
        {

        }

        private void doctorPatientsAppointmentsDataGrid_SelectedCellsChanged(object sender, SelectedCellsChangedEventArgs e)
        {

        }

        private void doctorPatientsSheduleFormAdd_Click(object sender, RoutedEventArgs e)
        {

        }

        private void doctorPatientsSheduleFormAlter_Click(object sender, RoutedEventArgs e)
        {

        }

        private void doctorPatientsSheduleFormDelete_Click(object sender, RoutedEventArgs e)
        {

        }

        private void doctorPatientsSheduleFormClose_Click(object sender, RoutedEventArgs e)
        {

        }
    }
}
